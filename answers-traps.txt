Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
a0-a7
13 is stored in a2
12 is stored in a1



Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
f(8) + 1的调用很简单，被编译器优化掉了。f的调用结果12直接在0x26写入a1



At what address is the function printf located?
  34:	600080e7          	jalr	1536(ra) # 630 <printf>
0x630 = ra + 1536 = 0x30 + 0x600 = 0x630 



What value is in the register ra just after the jalr to printf in main?
0x38
ra是返回地址，caller saved
所以刚执行完jalr之后，ra是main中下一指令的地址0x38.
之后main会恢复ra在main中应该有的值


Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      
What is the output? Here's an ASCII table that maps bytes to characters.
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
57676 = 0xe110

vamax ... 64 6c 72(*) ... va0     *表示指针位置
64 = d
6c = l
72 = r
所以输出%s = rld
综合就是 He110 World

Here's a description of little- and big-endian and a more whimsical description.

In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?

	printf("x=%d y=%d", 3);

	寄存器a2的值，a0存格式字符串，a1存第二个参数3